
on:
  push:
    branches: [ bare-minimal-linux ]
  pull_request:
    branches: [ bare-minimal-linux ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2.2
      with:
        key: ${{ github.job }}-${{ runner.os }} # Eg. "some_build-ubuntu-latest"
        max-size: 500M
        verbose: 2
        # variant: sccache
    - name: 'Add /usr/lib/ccache:/usr/local/opt/ccache/libexec to $PATH'
      run: |
        echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        echo "/usr/lib/ccache" >> $GITHUB_PATH
    - name: apt Install
      run: |
        sudo apt update
        sudo apt install automake libtool pkg-config # lldpd
        sudo apt install wget make gawk gcc bc bison flex xorriso libelf-dev libssl-dev xz-utils cpio file build-essential # minimal linux
        sudo apt install pkg-config upx-ucl # lshw

    - name: build_minimal_linux_live.sh
      run: |
        # export nullPATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
        cd src
        ./build_minimal_linux_live.sh

    - name: Pack
      working-directory: src/work
      run: tar cJfv ../${{ matrix.config.artifact }}artifact.xz .


    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        path: ./${{ matrix.config.artifact }}artifact.xz
        name: ${{ matrix.config.artifact }}artifact.xz

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MinGW", artifact: "Windows.tar.xz",
            os: ubuntu-latest
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux.tar.xz",
            os: ubuntu-latest
          }
        - {
            name: "macOS Latest Clang", artifact: "macOS.tar.xz",
            os: ubuntu-latest
          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ matrix.config.artifact }}artifact.xz
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url
    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ matrix.config.artifact }}artifact.xz
        asset_name: ${{ matrix.config.artifact }}artifact.xz
        asset_content_type: application/x-gtar


